{"ast":null,"code":"import _objectWithoutProperties from \"/home/niveus/3d walk/x/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"children\", \"color\", \"segments\", \"scale\", \"zoom\", \"grayscale\", \"url\", \"toneMapped\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { extend } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { useTexture } from './useTexture.js';\nvar ImageMaterialImpl = shaderMaterial({\n  color: new THREE.Color('white'),\n  scale: [1, 1],\n  imageBounds: [1, 1],\n  map: null,\n  zoom: 1,\n  grayscale: 0\n},\n/* glsl */\n\"\\n  varying vec2 vUv;\\n  void main() {\\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\\n    vUv = uv;\\n  }\\n\",\n/* glsl */\n\"\\n  // mostly from https://gist.github.com/statico/df64c5d167362ecf7b34fca0b1459a44\\n  varying vec2 vUv;\\n  uniform vec2 scale;\\n  uniform vec2 imageBounds;\\n  uniform vec3 color;\\n  uniform sampler2D map;\\n  uniform float zoom;\\n  uniform float grayscale;\\n  const vec3 luma = vec3(.299, 0.587, 0.114);\\n  vec4 toGrayscale(vec4 color, float intensity) {\\n    return vec4(mix(color.rgb, vec3(dot(color.rgb, luma)), intensity), color.a);\\n  }\\n  vec2 aspect(vec2 size) {\\n    return size / min(size.x, size.y);\\n  }\\n  void main() {\\n    vec2 s = aspect(scale);\\n    vec2 i = aspect(imageBounds);\\n    float rs = s.x / s.y;\\n    float ri = i.x / i.y;\\n    vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\\n    vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\\n    vec2 uv = vUv * s / new + offset;\\n    vec2 zUv = (uv - vec2(0.5, 0.5)) / zoom + vec2(0.5, 0.5);\\n    gl_FragColor = toGrayscale(texture2D(map, zUv) * vec4(color, 1.0), grayscale);\\n    \\n    #include <tonemapping_fragment>\\n    #include <encodings_fragment>\\n  }\\n\");\nvar Image = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      color = _ref.color,\n      _ref$segments = _ref.segments,\n      segments = _ref$segments === void 0 ? 1 : _ref$segments,\n      _ref$scale = _ref.scale,\n      scale = _ref$scale === void 0 ? 1 : _ref$scale,\n      _ref$zoom = _ref.zoom,\n      zoom = _ref$zoom === void 0 ? 1 : _ref$zoom,\n      _ref$grayscale = _ref.grayscale,\n      grayscale = _ref$grayscale === void 0 ? 0 : _ref$grayscale,\n      url = _ref.url,\n      toneMapped = _ref.toneMapped,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  extend({\n    ImageMaterial: ImageMaterialImpl\n  });\n  var texture = useTexture(url);\n  var planeBounds = Array.isArray(scale) ? [scale[0], scale[1]] : [scale, scale];\n  var imageBounds = [texture.image.width, texture.image.height];\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: ref,\n    scale: scale\n  }, props), /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: [1, 1, segments, segments]\n  }), /*#__PURE__*/React.createElement(\"imageMaterial\", {\n    color: color,\n    map: texture,\n    zoom: zoom,\n    grayscale: grayscale,\n    scale: planeBounds,\n    imageBounds: imageBounds,\n    toneMapped: toneMapped\n  }), children);\n});\nexport { Image };","map":{"version":3,"names":["_extends","React","THREE","extend","shaderMaterial","useTexture","ImageMaterialImpl","color","Color","scale","imageBounds","map","zoom","grayscale","Image","forwardRef","ref","children","segments","url","toneMapped","props","ImageMaterial","texture","planeBounds","Array","isArray","image","width","height","createElement","args"],"sources":["/home/niveus/3d walk/x/node_modules/@react-three/drei/core/Image.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { extend } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { useTexture } from './useTexture.js';\n\nconst ImageMaterialImpl = shaderMaterial({\n  color: new THREE.Color('white'),\n  scale: [1, 1],\n  imageBounds: [1, 1],\n  map: null,\n  zoom: 1,\n  grayscale: 0\n},\n/* glsl */\n`\n  varying vec2 vUv;\n  void main() {\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\n    vUv = uv;\n  }\n`,\n/* glsl */\n`\n  // mostly from https://gist.github.com/statico/df64c5d167362ecf7b34fca0b1459a44\n  varying vec2 vUv;\n  uniform vec2 scale;\n  uniform vec2 imageBounds;\n  uniform vec3 color;\n  uniform sampler2D map;\n  uniform float zoom;\n  uniform float grayscale;\n  const vec3 luma = vec3(.299, 0.587, 0.114);\n  vec4 toGrayscale(vec4 color, float intensity) {\n    return vec4(mix(color.rgb, vec3(dot(color.rgb, luma)), intensity), color.a);\n  }\n  vec2 aspect(vec2 size) {\n    return size / min(size.x, size.y);\n  }\n  void main() {\n    vec2 s = aspect(scale);\n    vec2 i = aspect(imageBounds);\n    float rs = s.x / s.y;\n    float ri = i.x / i.y;\n    vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n    vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n    vec2 uv = vUv * s / new + offset;\n    vec2 zUv = (uv - vec2(0.5, 0.5)) / zoom + vec2(0.5, 0.5);\n    gl_FragColor = toGrayscale(texture2D(map, zUv) * vec4(color, 1.0), grayscale);\n    \n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n  }\n`);\nconst Image = /*#__PURE__*/React.forwardRef(({\n  children,\n  color,\n  segments = 1,\n  scale = 1,\n  zoom = 1,\n  grayscale = 0,\n  url,\n  toneMapped,\n  ...props\n}, ref) => {\n  extend({\n    ImageMaterial: ImageMaterialImpl\n  });\n  const texture = useTexture(url);\n  const planeBounds = Array.isArray(scale) ? [scale[0], scale[1]] : [scale, scale];\n  const imageBounds = [texture.image.width, texture.image.height];\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: ref,\n    scale: scale\n  }, props), /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: [1, 1, segments, segments]\n  }), /*#__PURE__*/React.createElement(\"imageMaterial\", {\n    color: color,\n    map: texture,\n    zoom: zoom,\n    grayscale: grayscale,\n    scale: planeBounds,\n    imageBounds: imageBounds,\n    toneMapped: toneMapped\n  }), children);\n});\n\nexport { Image };\n"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,UAAT,QAA2B,iBAA3B;AAEA,IAAMC,iBAAiB,GAAGF,cAAc,CAAC;EACvCG,KAAK,EAAE,IAAIL,KAAK,CAACM,KAAV,CAAgB,OAAhB,CADgC;EAEvCC,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,CAFgC;EAGvCC,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,CAH0B;EAIvCC,GAAG,EAAE,IAJkC;EAKvCC,IAAI,EAAE,CALiC;EAMvCC,SAAS,EAAE;AAN4B,CAAD;AAQxC;AARwC;AAgBxC;AAhBwC,olCAAxC;AAgDA,IAAMC,KAAK,GAAG,aAAab,KAAK,CAACc,UAAN,CAAiB,gBAUzCC,GAVyC,EAUjC;EAAA,IATTC,QASS,QATTA,QASS;EAAA,IARTV,KAQS,QARTA,KAQS;EAAA,yBAPTW,QAOS;EAAA,IAPTA,QAOS,8BAPE,CAOF;EAAA,sBANTT,KAMS;EAAA,IANTA,KAMS,2BAND,CAMC;EAAA,qBALTG,IAKS;EAAA,IALTA,IAKS,0BALF,CAKE;EAAA,0BAJTC,SAIS;EAAA,IAJTA,SAIS,+BAJG,CAIH;EAAA,IAHTM,GAGS,QAHTA,GAGS;EAAA,IAFTC,UAES,QAFTA,UAES;EAAA,IADNC,KACM;;EACTlB,MAAM,CAAC;IACLmB,aAAa,EAAEhB;EADV,CAAD,CAAN;EAGA,IAAMiB,OAAO,GAAGlB,UAAU,CAACc,GAAD,CAA1B;EACA,IAAMK,WAAW,GAAGC,KAAK,CAACC,OAAN,CAAcjB,KAAd,IAAuB,CAACA,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,CAAvB,GAA8C,CAACA,KAAD,EAAQA,KAAR,CAAlE;EACA,IAAMC,WAAW,GAAG,CAACa,OAAO,CAACI,KAAR,CAAcC,KAAf,EAAsBL,OAAO,CAACI,KAAR,CAAcE,MAApC,CAApB;EACA,OAAO,aAAa5B,KAAK,CAAC6B,aAAN,CAAoB,MAApB,EAA4B9B,QAAQ,CAAC;IACvDgB,GAAG,EAAEA,GADkD;IAEvDP,KAAK,EAAEA;EAFgD,CAAD,EAGrDY,KAHqD,CAApC,EAGT,aAAapB,KAAK,CAAC6B,aAAN,CAAoB,eAApB,EAAqC;IAC3DC,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAOb,QAAP,EAAiBA,QAAjB;EADqD,CAArC,CAHJ,EAKhB,aAAajB,KAAK,CAAC6B,aAAN,CAAoB,eAApB,EAAqC;IACpDvB,KAAK,EAAEA,KAD6C;IAEpDI,GAAG,EAAEY,OAF+C;IAGpDX,IAAI,EAAEA,IAH8C;IAIpDC,SAAS,EAAEA,SAJyC;IAKpDJ,KAAK,EAAEe,WAL6C;IAMpDd,WAAW,EAAEA,WANuC;IAOpDU,UAAU,EAAEA;EAPwC,CAArC,CALG,EAahBH,QAbgB,CAApB;AAcD,CA/B0B,CAA3B;AAiCA,SAASH,KAAT"},"metadata":{},"sourceType":"module"}